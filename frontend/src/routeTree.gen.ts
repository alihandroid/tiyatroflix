/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SignupRouteImport } from './routes/signup'
import { Route as PlaysRouteImport } from './routes/plays'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthenticatedRouteImport } from './routes/_authenticated'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PlaysIdRouteImport } from './routes/plays_.$id'
import { Route as AuthenticatedDashboardRouteImport } from './routes/_authenticated/dashboard'
import { Route as AuthenticatedAdminRouteImport } from './routes/_authenticated/admin'
import { Route as AuthenticatedAdminIndexRouteImport } from './routes/_authenticated/admin/index'
import { Route as AuthenticatedAdminUsersRouteImport } from './routes/_authenticated/admin/users'
import { Route as AuthenticatedAdminPlaysRouteImport } from './routes/_authenticated/admin/plays'
import { Route as AuthenticatedPlaysIdWatchRouteImport } from './routes/_authenticated/plays_.$id_.watch'

const SignupRoute = SignupRouteImport.update({
  id: '/signup',
  path: '/signup',
  getParentRoute: () => rootRouteImport,
} as any)
const PlaysRoute = PlaysRouteImport.update({
  id: '/plays',
  path: '/plays',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedRoute = AuthenticatedRouteImport.update({
  id: '/_authenticated',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PlaysIdRoute = PlaysIdRouteImport.update({
  id: '/plays_/$id',
  path: '/plays/$id',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthenticatedDashboardRoute = AuthenticatedDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedAdminRoute = AuthenticatedAdminRouteImport.update({
  id: '/admin',
  path: '/admin',
  getParentRoute: () => AuthenticatedRoute,
} as any)
const AuthenticatedAdminIndexRoute = AuthenticatedAdminIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthenticatedAdminRoute,
} as any)
const AuthenticatedAdminUsersRoute = AuthenticatedAdminUsersRouteImport.update({
  id: '/users',
  path: '/users',
  getParentRoute: () => AuthenticatedAdminRoute,
} as any)
const AuthenticatedAdminPlaysRoute = AuthenticatedAdminPlaysRouteImport.update({
  id: '/plays',
  path: '/plays',
  getParentRoute: () => AuthenticatedAdminRoute,
} as any)
const AuthenticatedPlaysIdWatchRoute =
  AuthenticatedPlaysIdWatchRouteImport.update({
    id: '/plays_/$id_/watch',
    path: '/plays/$id/watch',
    getParentRoute: () => AuthenticatedRoute,
  } as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/plays': typeof PlaysRoute
  '/signup': typeof SignupRoute
  '/admin': typeof AuthenticatedAdminRouteWithChildren
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/plays/$id': typeof PlaysIdRoute
  '/admin/plays': typeof AuthenticatedAdminPlaysRoute
  '/admin/users': typeof AuthenticatedAdminUsersRoute
  '/admin/': typeof AuthenticatedAdminIndexRoute
  '/plays/$id/watch': typeof AuthenticatedPlaysIdWatchRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/plays': typeof PlaysRoute
  '/signup': typeof SignupRoute
  '/dashboard': typeof AuthenticatedDashboardRoute
  '/plays/$id': typeof PlaysIdRoute
  '/admin/plays': typeof AuthenticatedAdminPlaysRoute
  '/admin/users': typeof AuthenticatedAdminUsersRoute
  '/admin': typeof AuthenticatedAdminIndexRoute
  '/plays/$id/watch': typeof AuthenticatedPlaysIdWatchRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authenticated': typeof AuthenticatedRouteWithChildren
  '/login': typeof LoginRoute
  '/plays': typeof PlaysRoute
  '/signup': typeof SignupRoute
  '/_authenticated/admin': typeof AuthenticatedAdminRouteWithChildren
  '/_authenticated/dashboard': typeof AuthenticatedDashboardRoute
  '/plays_/$id': typeof PlaysIdRoute
  '/_authenticated/admin/plays': typeof AuthenticatedAdminPlaysRoute
  '/_authenticated/admin/users': typeof AuthenticatedAdminUsersRoute
  '/_authenticated/admin/': typeof AuthenticatedAdminIndexRoute
  '/_authenticated/plays_/$id_/watch': typeof AuthenticatedPlaysIdWatchRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/plays'
    | '/signup'
    | '/admin'
    | '/dashboard'
    | '/plays/$id'
    | '/admin/plays'
    | '/admin/users'
    | '/admin/'
    | '/plays/$id/watch'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/plays'
    | '/signup'
    | '/dashboard'
    | '/plays/$id'
    | '/admin/plays'
    | '/admin/users'
    | '/admin'
    | '/plays/$id/watch'
  id:
    | '__root__'
    | '/'
    | '/_authenticated'
    | '/login'
    | '/plays'
    | '/signup'
    | '/_authenticated/admin'
    | '/_authenticated/dashboard'
    | '/plays_/$id'
    | '/_authenticated/admin/plays'
    | '/_authenticated/admin/users'
    | '/_authenticated/admin/'
    | '/_authenticated/plays_/$id_/watch'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthenticatedRoute: typeof AuthenticatedRouteWithChildren
  LoginRoute: typeof LoginRoute
  PlaysRoute: typeof PlaysRoute
  SignupRoute: typeof SignupRoute
  PlaysIdRoute: typeof PlaysIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/signup': {
      id: '/signup'
      path: '/signup'
      fullPath: '/signup'
      preLoaderRoute: typeof SignupRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/plays': {
      id: '/plays'
      path: '/plays'
      fullPath: '/plays'
      preLoaderRoute: typeof PlaysRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated': {
      id: '/_authenticated'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthenticatedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/plays_/$id': {
      id: '/plays_/$id'
      path: '/plays/$id'
      fullPath: '/plays/$id'
      preLoaderRoute: typeof PlaysIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authenticated/dashboard': {
      id: '/_authenticated/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthenticatedDashboardRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/admin': {
      id: '/_authenticated/admin'
      path: '/admin'
      fullPath: '/admin'
      preLoaderRoute: typeof AuthenticatedAdminRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
    '/_authenticated/admin/': {
      id: '/_authenticated/admin/'
      path: '/'
      fullPath: '/admin/'
      preLoaderRoute: typeof AuthenticatedAdminIndexRouteImport
      parentRoute: typeof AuthenticatedAdminRoute
    }
    '/_authenticated/admin/users': {
      id: '/_authenticated/admin/users'
      path: '/users'
      fullPath: '/admin/users'
      preLoaderRoute: typeof AuthenticatedAdminUsersRouteImport
      parentRoute: typeof AuthenticatedAdminRoute
    }
    '/_authenticated/admin/plays': {
      id: '/_authenticated/admin/plays'
      path: '/plays'
      fullPath: '/admin/plays'
      preLoaderRoute: typeof AuthenticatedAdminPlaysRouteImport
      parentRoute: typeof AuthenticatedAdminRoute
    }
    '/_authenticated/plays_/$id_/watch': {
      id: '/_authenticated/plays_/$id_/watch'
      path: '/plays/$id/watch'
      fullPath: '/plays/$id/watch'
      preLoaderRoute: typeof AuthenticatedPlaysIdWatchRouteImport
      parentRoute: typeof AuthenticatedRoute
    }
  }
}

interface AuthenticatedAdminRouteChildren {
  AuthenticatedAdminPlaysRoute: typeof AuthenticatedAdminPlaysRoute
  AuthenticatedAdminUsersRoute: typeof AuthenticatedAdminUsersRoute
  AuthenticatedAdminIndexRoute: typeof AuthenticatedAdminIndexRoute
}

const AuthenticatedAdminRouteChildren: AuthenticatedAdminRouteChildren = {
  AuthenticatedAdminPlaysRoute: AuthenticatedAdminPlaysRoute,
  AuthenticatedAdminUsersRoute: AuthenticatedAdminUsersRoute,
  AuthenticatedAdminIndexRoute: AuthenticatedAdminIndexRoute,
}

const AuthenticatedAdminRouteWithChildren =
  AuthenticatedAdminRoute._addFileChildren(AuthenticatedAdminRouteChildren)

interface AuthenticatedRouteChildren {
  AuthenticatedAdminRoute: typeof AuthenticatedAdminRouteWithChildren
  AuthenticatedDashboardRoute: typeof AuthenticatedDashboardRoute
  AuthenticatedPlaysIdWatchRoute: typeof AuthenticatedPlaysIdWatchRoute
}

const AuthenticatedRouteChildren: AuthenticatedRouteChildren = {
  AuthenticatedAdminRoute: AuthenticatedAdminRouteWithChildren,
  AuthenticatedDashboardRoute: AuthenticatedDashboardRoute,
  AuthenticatedPlaysIdWatchRoute: AuthenticatedPlaysIdWatchRoute,
}

const AuthenticatedRouteWithChildren = AuthenticatedRoute._addFileChildren(
  AuthenticatedRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthenticatedRoute: AuthenticatedRouteWithChildren,
  LoginRoute: LoginRoute,
  PlaysRoute: PlaysRoute,
  SignupRoute: SignupRoute,
  PlaysIdRoute: PlaysIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
